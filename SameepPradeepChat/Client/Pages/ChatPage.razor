@page "/chat"
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@implements IAsyncDisposable

<link rel="stylesheet" href="SameepRadeepChat.styles.css">
<div class="form-group">
    <label>
        Username:
        <input @bind="userInput" maxlength="63" disabled="@(!IsConnected)"/>
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" disabled="@(!IsConnected)" @onclick="(e)=>SendTyping()"/>
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>
<p>@whoIsTyping</p>
<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection hubConnection;
    private List<string> messages = new List<string>();
    private string userInput;
    private string messageInput;
    string whoIsTyping;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });
        hubConnection.On<string>("UserTyping", (user) =>
        {
            var encodedMsg = $"{user} is typing a message...";
            whoIsTyping = encodedMsg;
            StateHasChanged();
        });
        hubConnection.On<string>("SendAnonMessage", ( message) =>
        {
            var encodedMsg = $"Anonymous: {message}";
            messages.Add(encodedMsg);
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    async Task Send()
    {
        if(userInput!= null)
        {
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);
        }
        else{
            await hubConnection.SendAsync("SendAnonMessage", messageInput);
        }
    }
        async Task SendTyping() {
            if(userInput!=null)
            {
                await hubConnection.SendAsync("SendTypeNotification", userInput);
            }
        }
        

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
